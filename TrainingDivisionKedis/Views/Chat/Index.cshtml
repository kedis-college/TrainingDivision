@using System.Security.Claims;
@{
    ViewData["Title"] = "Связь со студентами";
    var UserId = int.Parse(User.FindFirst(x => x.Type == ClaimTypes.NameIdentifier).Value);
}
<div class="content-flex">
    <h1>Связь со студентами</h1>

    <div class="d-flex my-3">
        <a class="btn btn-primary" asp-action="Create">Новое сообщение</a>
        <button class="btn btn-secondary ml-auto" id="refresh-chat-btn">Обновить</button>
    </div>
    <partial name="../Shared/_StatusMessages.cshtml" />

    <div id="chat-section" class="row content-flex-row">
        <div class="col-sm-4 pr-0 content-flex" id="chat-contacts">
            <div class="px-3 py-2 border-top border-bottom" id="chat-contacts-filter">
                <input type="text" class="form-control form-control-sm" data-filter-col="0" placeholder="Найти" />
            </div>
            <div id="chat-contacts-table" class="scroll-content">
                @await Component.InvokeAsync("Contacts", new { id = UserId })
            </div>
        </div>
        <div class="col-sm-8 bg-light border-top border-bottom content-flex">
            <div class="mt-3 mx-2 scroll-content" id="chat-messages">
            </div>
            <form id="message-form" class="my-3 mx-2" method="POST" enctype="multipart/form-data">
                <div class="form-row">
                    <div class="form-group col-12">
                        <label for="text">Сообщение</label>
                        <textarea maxlength="500" class="form-control" name="Text" id="Text"></textarea>
                    </div>
                    <div class="custom-file form-group col-5 ml-1">
                        <input type="file" class="custom-file-input" name="AppliedFile" id="AppliedFile">
                        <label class="custom-file-label" for="AppliedFile">Выберите файл</label>
                    </div>
                    <div class="col-7 form-group text-right" style="margin-left:-0.25rem;">
                        <input type="submit" class="btn btn-primary btn-sm" id="send-message-button" value="Отправить" />
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        var refreshMessages = async function (container, id) {
            await $.get("/Chat/GetMessagesByUsers", { id }, function (data) { container.html(data); })
        };

        var refreshContacts = async function (container) {
            await $.get("/Chat/GetContacts", function (data) { container.html(data); });
        };

        var scrollMessagesToBottom = function () {
            $("#chat-messages").scrollTop($("#messages").height())
        }

        var chatContactClickHandler = async function () {
            const id = $(this).prop('id');
            await refreshMessages($('#chat-messages'), id);
            $('.chat-contact.alert-secondary').removeClass('alert-secondary');
            $(this).addClass('alert-secondary');
            scrollMessagesToBottom();
        }

        var refreshContactsAndMessages = async function () {
            let id = null;
            if ($('.chat-contact.alert-secondary').length > 0) {
                id = $('.chat-contact.alert-secondary').prop('id');
            }
            await refreshContacts($('#chat-contacts-table'));
            if (id != null) {
                $(`.chat-contact[id='${id}']`).addClass('alert-secondary')
                await refreshMessages($('#chat-messages'), id);
                scrollMessagesToBottom();
            }
            setHandlers();
        }

        var sendMessageButtonHandler = function () {
            event.preventDefault();

            // Check Recipients
            if ($('.chat-contact.alert-secondary').length < 1) {
                alert('Выберите получателя!')
                return
            }

            // Get form
            var form = $('#message-form')[0];

            // Create an FormData object
            var data = new FormData(form);

            // Append Recipients
            const id = $('.chat-contact.alert-secondary').prop('id');
            data.append('Recipients[]', id)

            $.ajax({
                type: "POST",
                enctype: 'multipart/form-data',
                url: `/Chat/CreateAjax/`,
                data: data,
                processData: false,
                contentType: false,
                cache: false,
                timeout: 600000,
                success: async function () {
                    await refreshContactsAndMessages();
                    form.reset();
                },
                error: async function (res) {
                    const response = res.responseJSON
                    alert(response.error && response.error.message ? response.error.message : "Ошибка при отправке сообщения")
                }
            });
        }

        var setHandlers = function () {
            $('.chat-contact').on('click', chatContactClickHandler);

            $('#refresh-chat-btn').on('click', refreshContactsAndMessages);

            $('#chat-contacts-table table').filtable({
                controlPanel: $('#chat-contacts-filter')
            });

            $('#chat-contacts-table table').on('aftertablefilter', function () {
                $('.chat-contact').on('click', chatContactClickHandler);
            });           
        }

        $(document).ready(function () {
            setHandlers();
            $('#send-message-button').on('click', sendMessageButtonHandler);
        });
    </script>
}
